using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GridMaze : MonoBehaviour
{
    [SerializeField]
    public GameObject cubePrefab;

    private int[,] _gridArray = new int[,]
    {
  //       {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
		// {1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		// {1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		// {1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
		// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		// {1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1},
		// {1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1},
		// {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		// {1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
		// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}

		// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// {1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1},
		// {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1},
		// {1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		// {1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		// {0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
		// {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		// {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		// {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		// {1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
		// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
		{1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
		{1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
		{1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1},
		{1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
		{0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1},
		{1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
		{1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
		{1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1},
		{0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0},
		{1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1},
		{1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1},
		{1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1},
		{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
		{1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1},
		{1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1},
		{1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1},
		{0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},
		{1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1},
		{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1},
		{1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1},
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1},
		{0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
		{1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
		{1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1},
		{1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1},
		{1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1},
		{1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
		{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1},
		{1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1},
		{1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1},
		{1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
		{0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0},
		{1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1},
		{1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
		{1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1},
		{1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1},
		{0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0},
		{1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1},
		{1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1},
		{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1},
		{1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1},
		{1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1},
		{1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
		{0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1},
		{1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		/*{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
		{1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1},
		{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
		{1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
		{1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
		{1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}*/

		// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// {1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1},
		// {1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1},
		// {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
		// {1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1},
		// {0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
		// {1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
		// {1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1},
		// {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1},
		// {1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1},
		// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} 

    }; 

    private int _width;
    private int _height;

    private Vector2 _playerMatrixPos;

    void Start()
    {
        _width = _gridArray.GetLength(0);
        _height = _gridArray.GetLength(1);

        for (int x = 0; x < _width; x++)
        {
            for (int y = 0; y < _height; y++)
            {
                if (_gridArray[x, y] == 1)
                {
                    CreateCube(x, y);
                }
            }
        }

        _playerMatrixPos.y = _height /2;
    }

    private GameObject CreateCube(int x, int y)
    {
        GameObject cubeObject = Instantiate(cubePrefab);
        cubeObject.transform.position =
            new Vector3(x - _width / 2, cubeObject.transform.localScale.y / 2, y - _height / 2);

        return cubeObject;
    }

    public int GetStepsCount(Vector2 direction)
    {
	    int counter = 0;
	    // right
	    if (direction.x == 1)
	    {
		    for (int i = (int) _playerMatrixPos.x + 1; i < _width; i+= (int)direction.x)
		    {
			    if (_gridArray[(int) _playerMatrixPos.y, i] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }

			    counter++;
		    }
	    }
	    else if (direction.x == -1)
	    {
		    for (int i = (int) _playerMatrixPos.x - 1; i >= 0; i+= (int)direction.x)
		    {
			    if (_gridArray[(int) _playerMatrixPos.y, i] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }

			    counter++;
		    }
	    }
	    else if (direction.y == 1)
	    {
		    for (int i = (int) _playerMatrixPos.y + 1; i < +_height; i+= (int)direction.y)
		    {
			    if (_gridArray[i, (int) _playerMatrixPos.x] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }

			    counter++;
		    }
	    }
	    else if(direction.y == -1)
	    {
		    for (int i = (int) _playerMatrixPos.y - 1; i >= 0; i+= (int)direction.y)
		    {
			    if (_gridArray[i, (int) _playerMatrixPos.x] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }

			    counter++;
		    }
	    }

	    return counter;
    }
}